{"version":3,"sources":["Components/ToDoForm.js","Components/ToDo.js","Components/ToDoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","newDate","d","Date","getMonth","getDate","getFullYear","getHours","getMinutes","getSeconds","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","date","className","placeholder","onChange","name","ref","onClick","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","complete","TodoList","data","setTodos","test","newTodos","listLength","length","updatedTodos","removedArr","filter","todoId","newValue","prev","item","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bda37585.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\nfunction TodoForm(props) {\r\n    const [input, setInput] = useState(props.edit ? props.edit.value : '');\r\n\r\n    //\r\n    const inputRef = useRef(null);\r\n\r\n    // allows targeting of the text input field\r\n    useEffect(() => {\r\n        inputRef.current.focus();\r\n    });\r\n\r\n    // allows the change of input state in the input field.\r\n    const handleChange = e => {\r\n        setInput(e.target.value);\r\n    };\r\n\r\n    // contructs a date and time as a string and returns it as const date.\r\n    const newDate = () => {\r\n        var d = new Date();\r\n        // getMonth is indexed at 0\r\n        const date =  d.getMonth()+ 1 + \"/\"\r\n                    + d.getDate() + \"/\"\r\n                    + d.getFullYear() + \" @\"\r\n                    + d.getHours() + \":\" \r\n                    + d.getMinutes() + \":\" \r\n                    + d.getSeconds()\r\n        return date;\r\n    }\r\n\r\n    // generate todo items here\r\n    // id: numerical identifier for every todo in state\r\n    // text: the text for each todo\r\n    // date: calls newDate() and generates the date and time for every todo\r\n    //       (NOTE: also updates date upon handleChange.)\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        props.onSubmit({\r\n        // will need to find a better way of swapping id when updating a todo\r\n        id: Math.floor(Math.random() * 10000),\r\n        text: input,\r\n        date: newDate()\r\n        });\r\n        //reset input to '' upon enter\r\n        setInput('');\r\n    };\r\n    \r\n    return (\r\n        <form onSubmit={handleSubmit} className='todo-form'>\r\n        {props.edit ? (\r\n            <>\r\n            <input\r\n                placeholder='Update your item'\r\n                value={input}\r\n                onChange={handleChange}\r\n                name='text'\r\n                ref={inputRef}\r\n                className='todo-input edit'\r\n            />\r\n            <button onClick={handleSubmit} className='todo-button edit'>\r\n                Update\r\n            </button>\r\n            </>\r\n        ) : (\r\n            <>\r\n            <input\r\n                placeholder='Add a todo'\r\n                value={input}\r\n                onChange={handleChange}\r\n                name='text'\r\n                className='todo-input'\r\n                ref={inputRef}\r\n            />\r\n            <button onClick={handleSubmit} className='todo-button'>\r\n                Add\r\n            </button>\r\n            </>\r\n        )}\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default TodoForm;\r\n\r\n","import React, { useState } from 'react';\r\nimport { RiCloseCircleLine } from 'react-icons/ri';\r\nimport { TiEdit } from 'react-icons/ti';\r\n// Imported Components\r\nimport TodoForm from './ToDoForm';\r\n\r\nconst Todo = ({ todos, completeTodo, removeTodo, updateTodo }) => {\r\n  const [edit, setEdit] = useState({\r\n    id: null,\r\n    text: '',\r\n    date: ''\r\n  });\r\n\r\n  const submitUpdate = input => {\r\n    // update edit state\r\n    updateTodo(edit.id, input);\r\n    // after update reset state to empty\r\n    setEdit({\r\n      id: null,\r\n      text: '',\r\n      date: ''\r\n    });\r\n  };\r\n\r\n  if (edit.id) {\r\n    return <TodoForm edit={edit} onSubmit={submitUpdate} />;\r\n  }\r\n\r\n  return todos.map((todo, index) => (\r\n    <div\r\n      // styling for when a todo is complete\r\n      className={todo.complete ? 'todo-row complete' : 'todo-row'}\r\n      key={index}\r\n    >\r\n        <div className=\"todo-date\">\r\n            {todo.date}\r\n        </div>\r\n        <div className=\"todo-text\" key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n            {todo.text}\r\n        </div>\r\n        <div className='icons'>\r\n        <RiCloseCircleLine\r\n          onClick={() => removeTodo(todo.id)}\r\n          className='delete-icon'\r\n        />\r\n        <TiEdit\r\n          onClick={() => setEdit({ id: todo.id, text: todo.text })}\r\n          className='edit-icon'\r\n        />\r\n        </div>\r\n      \r\n    </div>\r\n  ));\r\n};\r\n\r\nexport default Todo;","import React, { useState } from 'react';\r\nimport data from '../data.json'\r\n// Imported Components\r\nimport TodoForm from './ToDoForm';\r\nimport Todo from './ToDo';\r\n\r\nfunction TodoList() {\r\n    const [todos, setTodos] = useState(data);\r\n\r\n    // Function that takes a newToDo from ToDoForm and add pushes it onto the list\r\n    // if text in ToDoForm is empty or only contains special characters return\r\n    // otherwise create a newTodo and add the value to the beginning of list\r\n    const addTodo = todo => {\r\n        if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n        return;\r\n        }\r\n\r\n        const newTodos = [todo, ...todos];\r\n        setTodos(newTodos);\r\n    };\r\n\r\n    // checks if an update contains text or is only special characters b\r\n    // otherwise updates the todo text and updates the date upon edit\r\n    // bug: does not delete the previous todo before edit but will add it to top of the todolist\r\n    const updateTodo = (todoId, newValue) => {\r\n        if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n            return;\r\n        }\r\n        //referance to original item\r\n        // if id is matched, sets the updated todo as the previous todo, otherwise return previous item.\r\n        setTodos(prev => prev.map(item => ((item.id === todoId) ? (newValue) : (item))));\r\n        \r\n        \r\n        \r\n    };\r\n\r\n    // removes a todo from the todolist\r\n    // filters all todo with matching perameter id\r\n    const removeTodo = id => {\r\n        const removedArr = [...todos].filter(todo => todo.id !== id);\r\n        setTodos(removedArr);\r\n    };\r\n\r\n    // If a todo is completed, change completed: false to true\r\n    const completeTodo = id => {\r\n        let updatedTodos = todos.map(todo => {\r\n        if (todo.id === id) {\r\n            todo.complete = !todo.complete;\r\n        }\r\n        return todo;\r\n        });\r\n        setTodos(updatedTodos);\r\n    };\r\n    /*\r\n    const saveToDo = todos => {\r\n        var fileName = 'data.json';\r\n        //create a blob to save\r\n        var fileToSave = new Blob([JSON.stringify(todos)], {\r\n            type: 'application/json',\r\n            name: fileName\r\n        });\r\n\r\n        //save(fileToSave, fileName);\r\n    }*/\r\n    return (\r\n        <>\r\n        <h1>To Do List</h1>\r\n        <TodoForm onSubmit={addTodo} listLength={todos.length} />\r\n        <Todo\r\n            todos={todos}\r\n            completeTodo={completeTodo}\r\n            removeTodo={removeTodo}\r\n            updateTodo={updateTodo}\r\n        /> \r\n        </>\r\n    );\r\n}\r\n\r\nexport default TodoList;\r\n/*<button onClick={saveToDo} >Save</button>*/","import React from 'react';\nimport './App.css';\nimport TodoList from './Components/ToDoList';\n\nfunction App() {\n  return (\n    <div className='todo-app'>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}